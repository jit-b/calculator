// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Expression is an autogenerated mock type for the Expression type
type Expression struct {
	mock.Mock
}

type Expression_Expecter struct {
	mock *mock.Mock
}

func (_m *Expression) EXPECT() *Expression_Expecter {
	return &Expression_Expecter{mock: &_m.Mock}
}

// Evaluate provides a mock function with given fields:
func (_m *Expression) Evaluate() float32 {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// Expression_Evaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evaluate'
type Expression_Evaluate_Call struct {
	*mock.Call
}

// Evaluate is a helper method to define mock.On call
func (_e *Expression_Expecter) Evaluate() *Expression_Evaluate_Call {
	return &Expression_Evaluate_Call{Call: _e.mock.On("Evaluate")}
}

func (_c *Expression_Evaluate_Call) Run(run func()) *Expression_Evaluate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Expression_Evaluate_Call) Return(_a0 float32) *Expression_Evaluate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Expression_Evaluate_Call) RunAndReturn(run func() float32) *Expression_Evaluate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExpression interface {
	mock.TestingT
	Cleanup(func())
}

// NewExpression creates a new instance of Expression. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExpression(t mockConstructorTestingTNewExpression) *Expression {
	mock := &Expression{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
