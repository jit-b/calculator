// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	domain "Calculator/src/domain"

	mock "github.com/stretchr/testify/mock"
)

// Operator is an autogenerated mock type for the Operator type
type Operator struct {
	mock.Mock
}

type Operator_Expecter struct {
	mock *mock.Mock
}

func (_m *Operator) EXPECT() *Operator_Expecter {
	return &Operator_Expecter{mock: &_m.Mock}
}

// AsString provides a mock function with given fields:
func (_m *Operator) AsString() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Operator_AsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsString'
type Operator_AsString_Call struct {
	*mock.Call
}

// AsString is a helper method to define mock.On call
func (_e *Operator_Expecter) AsString() *Operator_AsString_Call {
	return &Operator_AsString_Call{Call: _e.mock.On("AsString")}
}

func (_c *Operator_AsString_Call) Run(run func()) *Operator_AsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Operator_AsString_Call) Return(_a0 string) *Operator_AsString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Operator_AsString_Call) RunAndReturn(run func() string) *Operator_AsString_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExpression provides a mock function with given fields: exp1, exp2
func (_m *Operator) CreateExpression(exp1 domain.Expression, exp2 domain.Expression) domain.Expression {
	ret := _m.Called(exp1, exp2)

	var r0 domain.Expression
	if rf, ok := ret.Get(0).(func(domain.Expression, domain.Expression) domain.Expression); ok {
		r0 = rf(exp1, exp2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Expression)
		}
	}

	return r0
}

// Operator_CreateExpression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExpression'
type Operator_CreateExpression_Call struct {
	*mock.Call
}

// CreateExpression is a helper method to define mock.On call
//   - exp1 domain.Expression
//   - exp2 domain.Expression
func (_e *Operator_Expecter) CreateExpression(exp1 interface{}, exp2 interface{}) *Operator_CreateExpression_Call {
	return &Operator_CreateExpression_Call{Call: _e.mock.On("CreateExpression", exp1, exp2)}
}

func (_c *Operator_CreateExpression_Call) Run(run func(exp1 domain.Expression, exp2 domain.Expression)) *Operator_CreateExpression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Expression), args[1].(domain.Expression))
	})
	return _c
}

func (_c *Operator_CreateExpression_Call) Return(_a0 domain.Expression) *Operator_CreateExpression_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Operator_CreateExpression_Call) RunAndReturn(run func(domain.Expression, domain.Expression) domain.Expression) *Operator_CreateExpression_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewOperator interface {
	mock.TestingT
	Cleanup(func())
}

// NewOperator creates a new instance of Operator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOperator(t mockConstructorTestingTNewOperator) *Operator {
	mock := &Operator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
