// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	domain "Calculator/src/domain"

	mock "github.com/stretchr/testify/mock"
)

// Value is an autogenerated mock type for the Value type
type Value struct {
	mock.Mock
}

type Value_Expecter struct {
	mock *mock.Mock
}

func (_m *Value) EXPECT() *Value_Expecter {
	return &Value_Expecter{mock: &_m.Mock}
}

// CreateExpression provides a mock function with given fields: s
func (_m *Value) CreateExpression(s string) (domain.Expression, error) {
	ret := _m.Called(s)

	var r0 domain.Expression
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Expression, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Expression); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Expression)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Value_CreateExpression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExpression'
type Value_CreateExpression_Call struct {
	*mock.Call
}

// CreateExpression is a helper method to define mock.On call
//   - s string
func (_e *Value_Expecter) CreateExpression(s interface{}) *Value_CreateExpression_Call {
	return &Value_CreateExpression_Call{Call: _e.mock.On("CreateExpression", s)}
}

func (_c *Value_CreateExpression_Call) Run(run func(s string)) *Value_CreateExpression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Value_CreateExpression_Call) Return(_a0 domain.Expression, _a1 error) *Value_CreateExpression_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Value_CreateExpression_Call) RunAndReturn(run func(string) (domain.Expression, error)) *Value_CreateExpression_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewValue interface {
	mock.TestingT
	Cleanup(func())
}

// NewValue creates a new instance of Value. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValue(t mockConstructorTestingTNewValue) *Value {
	mock := &Value{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
